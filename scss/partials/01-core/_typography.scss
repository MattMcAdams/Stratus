// ----------------------------------------------------
// FONTS
// ----------------------------------------------------

/// Sets the font for body text
/// @group typography
/// @type string | keyword(serif, sans-serif, monospace, cursive, system-ui) [sans-serif]
$font-body: sans-serif !default;

/// Sets the font for header text
/// @group typography
/// @type string | keyword(serif, sans-serif, monospace, cursive, system-ui) [serif]
$font-head: serif !default;

/// Sets the font for monospace text
/// @group typography
/// @type string | keyword(serif, sans-serif, monospace, cursive, system-ui) [monospace]
$font-mono: monospace !default;

/// Sets the icon font
/// @group typography
/// @type string [null]
$font-icon: null !default;

// ----------------------------------------------------
// CONFIG
// ----------------------------------------------------

$type-config: (
  'text-size': 16, // px[unitless]
  'line-height': 1.6, // unitless
  'rem-size': 16, // px[unitless]
  'ratio-default': 1.25, // unitless, usually equal to ratio-portrait
  'ratio-portrait': 1.25, // unitless
  'ratio-landscape': 1.5 // unitless
) !default;

$type-scale: (
  'xlarge': 3,
  'large': 2,
  'medium': 1,
  'normal': 0,
  'small': -1,
  'xsmall': -2) !default;

// ----------------------------------------------------
// MODULAR SCALE
// ----------------------------------------------------

$type-values: (
  'text-size': map-get($type-config, 'text-size') / map-get($type-config, 'rem-size') + 0rem,
  'line-height': map-get($type-config, 'text-size') * map-get($type-config, 'line-height') / map-get($type-config, 'rem-size') + 0rem,
  'rem-size': map-get($type-config, 'rem-size') + 0px
);

@function modular-scale($step, $ratio: map-get($type-config, 'ratio-default'), $base: map-get($type-values, 'text-size')) {

  @if type-of($step) == 'string' {
    $step: map-get($type-scale, $step);
  }

  @if $step == 0 {
    @return $base;
  } @else if $step < 0 {
    $step: $step * -1;
    @return $base / pow($ratio, $step);
  } @else {
    @return $base * pow($ratio, $step);
  }
}


@function line-height( $input: map-get($type-values, 'text-size') ) {
  $base-line-height: strip-unit( map-get($type-values, 'line-height') );
  $text-size: strip-unit( $input );

  $line-height: 0;
  $i: 1;

  @while $line-height < $text-size {
    $line-height: $base-line-height * $i;
    $i: $i + 0.5;
  }
  @return $line-height + 0rem;
}

// ----------------------------------------------------
// MIXINS
// ----------------------------------------------------

@mixin type-init {
  @media (orientation: portrait) {
    :root {
      @each $key, $value in $type-scale {
        $size: modular-scale($value, map-get($type-config, 'ratio-portrait'));
        --#{$key}: #{$size};
        --#{$key}-lh: #{line-height($size)};
      }
    }
  }
  @media (orientation: landscape) {
    :root {
      @each $key, $value in $type-scale {
        $size: modular-scale($value, map-get($type-config, 'ratio-landscape'));
        --#{$key}: #{$size};
        --#{$key}-lh: #{line-height($size)};
      }
    }
  }
}

// input must be key in $font-sizes
@mixin type-setting($input) {
  $size: modular-scale($input);
  font-size: $size;
  font-size: var(--#{$input});
  line-height: line-height($size);
  line-height: var(--#{$input}-lh);
}

// ----------------------------------------------------
// USE EXAMPLE
// ----------------------------------------------------
//
// @include type-init;
// p { @include type-setting('normal'); }
