// ==========================================================================
// SECTION FUNCTIONS
// Functions required by several functions and mixins.
// ==========================================================================

@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';

@use 'validation' as *;

/// --------------------------------------------------------------------------
/// Power function
/// @group utility
/// @author Sass
///
/// @arg {number} $base - number to be multiplied
/// @arg {number(unitless)} $exponents - number of times it should be multiplied
///
/// @returns {number}
/// @example
/// pow(10, 3)
/// > 1,000
/// --------------------------------------------------------------------------
@function pow(
  $base,
  $exponents
  ) {
  $_raised: 1;

  @for $_i from 1 through $exponents {
    $_raised: $_raised * $base;
  }
  @return $_raised;
}

/// --------------------------------------------------------------------------
/// String Explode
/// Splits a string at the indicated delimiter
/// @group utility
/// @author Nenad Novaković
///
/// @requires string.length (sass:string)
/// @requires string.slice (sass:string)
/// @requires string.index (sass:string)
/// @requires list.append (sass:list)
/// @requires meta.type-of (sass:meta)
/// @requires is-string (validation.scss)
///
/// @arg {string} $string The string to be split apart
/// @param {string} $delimiter Where to split the string
///
/// @returns {List}
/// @example:
/// str-explode('hello-world', '-')
/// > (hello, world)
/// --------------------------------------------------------------------------
@function str-explode(
  $string,
  $delimiter: ''
  ) {
  @if not is-string($string) {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{meta.type-of($string)}`. Type of `String` is required!';
  }
  @else if not is-string($delimiter) {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{meta.type-of($string)}`. Type of `String` is required!';
  }

  $_result: ();
  $_running: true;

  @if string.length($delimiter) == 0 {
    @for $i from 1 through string.length($string) {
      $_result: list.append($result, string.slice($string, $i, $i));
    }
    @return $_result;
  }

  @while $_running {
    $_index: string.index($string, $delimiter);

    @if $_index != null {
      $_item: string.slice($string, 1, ($_index - 1));
      $_result: list.append($_result, $_item);
      $string: string.slice($string, ($_index + string.length($delimiter)));
    }
    @else { $_running: false; }
  }

  @return list.append($_result, $string);
}

/// --------------------------------------------------------------------------
/// Deep Map Check
/// Check if nested map has a value by the keys
/// @group maps
/// @author Nenad Novaković
///
/// @requires map.has-key (sass:map)
/// @requires meta.type-of (sass:meta)
/// @requires map.get (sass:map)
/// @requires is-map (validation.scss)
///
/// @arg {map} $map - map to check
/// @arg {string(s)} $keys - keys in $map
///
/// @returns {boolean}
/// @example:
/// deep-map-check($nested-map, 'key-1', 'key-2')
/// > boolean
/// --------------------------------------------------------------------------
@function deep-map-check(
  $map,
  $keys...
  ) {
  @if not is-map($map) {
    @error 'The argument $map: "#{$map}" is of incorrect type: "#{meta.type-of($map)}". Type of "Map" is required!';
  }
  @each $key in $keys {
    @if not (map.has-key($map, $key)) {
      @return false;
    }
    $map: map.get($map, $key);
  }
  @return true;
}

/// --------------------------------------------------------------------------
/// Deep Map Get
/// Get a value from a nested map by the keys
/// @group maps
/// @author Nenad Novaković
///
/// @requires map.get (sass:map)
/// @requires meta.type-of (sass:meta)
/// @requires is-map (validation.scss)
///
/// @arg {map} $map - map to check
/// @arg {string(s)} $keys - keys in $map
///
/// @returns {Unspecified} it may return anything as a result
/// @example:
/// deep-map-check($nested-map, 'top-level-key', 'second-level-key')
/// > value of second level key
/// --------------------------------------------------------------------------
@function deep-map-get(
  $map,
  $keys...
  ) {
  @if not is-map($map) {
    @error 'The argument $map: "#{$map}" is of incorrect type: "#{meta.type-of($map)}". Type of "Map" is required!';
  }

  @each $key in $keys {
    $map: map.get($map, $key);
  }

  @return $map;
}

/// --------------------------------------------------------------------------
/// Get
/// Search for any value contained within nested maps by using dot notation
/// as the key argument
/// @group maps
/// @author Nenad Novaković
///
/// @requires str-explode
/// @requires deep-map-check
/// @requires deep-map-get
///
/// @arg {map} $map - map to check
/// @arg {string} $key - keys in $map
///
/// @returns {Unspecified} it may return anything as a result
/// @example
/// get($settings, border.radius.xs)
/// > value of the "xs" key
/// --------------------------------------------------------------------------
@function get($map, $key) {
  $keys: str-explode($key, ', ');

  @if not deep-map-check($map, $keys...) {
    @error 'The argument $map: "#{$map}" doesn\'t have some of the $keys: "#{$keys}"!';
  }

  @return deep-map-get($map, $keys...);
}

/// --------------------------------------------------------------------------
/// Recursive Map Merge
/// Search for any value contained within nested maps by using dot notation
/// as the key argument
/// @group maps
/// @author Zsolt Pentz
///
/// @requires map.has-key (sass:map)
/// @requires map.get (sass:map)
/// @requires map.merge (sass:map)
/// @requires meta.type-of (sass:meta)
///
/// @arg {map} $parent-map - map to override
/// @arg {map} $child-map - map with new values to merge
///
/// @returns {map} merged $parent-map and $child-map
///
/// DEPRECIATED: Code is no longer used
/// --------------------------------------------------------------------------
@function recursive-map-merge(
  $parent-map,
  $child-map
  ) {
	$_result: $parent-map;
	@each $_key, $_value in $child-map {
		@if ( not ( map.has-key($_result, $_key)) )
      or ( meta.type-of(map.get($_result, $_key)) != meta.type-of( $_value ) )
      or ( not ( (meta.type-of(map.get($_result, $_key)) ) == map and meta.type-of($_value) == map )) {
			$_result: map.merge($_result, ($_key: $_value));
		}
		@else {
			$_result: map.merge($_result, ($_key: recursive-map-merge(map.get($_result, $_key), $_value)));
		}
	}
	@return $_result;
}

/// --------------------------------------------------------------------------
/// Map Depth
/// Compute the maximum depth of a map
/// @group maps
/// @author Unknown
///
/// @requires is-map (validation.scss)
/// @requires math.max (sass:math)
///
/// @arg {Map} $map
///
/// @returns {Number} max depth of `$map`
/// --------------------------------------------------------------------------
@function map-depth(
  $map
  ) {
  $_level: 1;

  @each $_key, $_value in $map {
    @if is-map($_value) {
      $_level: math.max(map-depth($_value) + 1, $_level);
    }
  }
  @return $_level;
}

/// --------------------------------------------------------------------------
/// Strip Unit
/// Strips the unit from a number.
/// @group utility
/// @author Matthew McAdams
///
/// @arg {number} $value
///
/// @return {number (unitless)}
/// @example scss
///   $dimension: strip-unit(10em);
///
///   // Output
///   $dimension: 10;
/// --------------------------------------------------------------------------
@function strip-unit($value) {
  @return ($value / ($value * 0 + 1));
}
// END !SECTION FUNCTIONS
