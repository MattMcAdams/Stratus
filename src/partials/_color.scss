// ==========================================================================
// SECTION COLOR
// Create and manipulate color with a mix of these functions:
// color.mix() | mix() // built-in Sass
// color.scale | scale-color() // built-in Sass
// stratus.color | stratus-color() // Stratus
// stratus.scale-index | stratus-scale-index() // Stratus
// stratus.shift-color | stratus-shift-color() // Stratus
//
// Example: stratus.shift-color(stratus.color('primary', 'dark'), 400)
// ==========================================================================
// TODO: Add opacity option
// TODO: Make unit tests

/// --------------------------------------------------------------------------
/// Default color mix method
/// @group color
/// @type string ['mix' | 'scale']
/// --------------------------------------------------------------------------
$stratus-default-color-method: 'mix' !default;

/// --------------------------------------------------------------------------
/// Default color map
/// @group color
/// @type map
/// --------------------------------------------------------------------------
$stratus-color-map: $stratus-default-color-map !default;

$stratus-default-color-map: (
  'info': #1273e6,
  'notice': #da7b12,
  'negative': #d7373f,
  'positive': #258f6c
);

/// --------------------------------------------------------------------------
/// Example get color
/// @group color
/// @author Matt McAdams
/// --------------------------------------------------------------------------
@function stratus-color($args...) {
  $_map: $stratus-color-map;
  @return deep-map-get($_map, $args);
}

/// --------------------------------------------------------------------------
/// Scale Index
/// @group color
/// @author Matt McAdams
///
/// @arg {number(unitless)} - Must be a non-negative integer < 1000 & divisible by 50
/// @example stratus-color-index(400) -> 20%
/// 500 is 0. every 50 represents 10%.
/// Inputs less than 500 will be converted to positive percentages,
/// Inputs greater than 500 will be converted to negative percentages.
/// --------------------------------------------------------------------------
@function stratus-scale-index($number) {
  @if is-integer($number / 50) and ($number < 1000) {
    @return (($number - 500) / - 5) + 0%;
  }
  @else {
    @return _error('Invalid argument for `$number`: `(#{$method}{#{type-of($method)}})`. Must be a non-negative integer < 1000 & divisible by 50.', 'stratus-scale-index');
  }
}

/// --------------------------------------------------------------------------
/// Shift Color
/// @group color
/// @author Matt McAdams
/// @requires $stratus-default-color-method
///
/// @arg {color} $color - Color to be manipulated
/// @arg {number(%)} $percent - percent by which to be manipulated, can be positive or negative
/// @param {keyword['mix'|'scale']} $method [$stratus-default-color-method]
/// use color.mix() or color.scale() to calculate new color.
/// @example background-color: stratus-color-shift(#AAA, -20%);
/// --------------------------------------------------------------------------
@function stratus-shift-color($color, $percent, $method: $stratus-default-color-method) {
  @if $method == 'mix' {
    $_base: white;
    @if $percent < 0 {
      $_base: black;
      $percent: $percent * -1;
    }
    @return mix($_base, $color, $percent);
  }
  @else if $method == 'scale' {
    @return scale-color($color, $lightness: $percent);
  }
  @else {
    @return _error('Invalid argument for `$method`: `(#{$method}{#{type-of($method)}})`. Must be either `mix{string}` or `scale{string}`.', 'stratus-shift-color()');
  }
}
// END !SECTION COLOR
