// ==========================================================================
// SECTION COLOR
// Create and manipulate color with a mix of these functions:
// color.mix() | mix() // built-in Sass
// color.scale | scale-color() // built-in Sass
// stratus.color | color() // Stratus
// stratus.scale-index | scale-index() // Stratus
// stratus.color-shift | color-shift() // Stratus
//
// Example: stratus.color-shift(stratus.color('primary', 'dark'), 400)
// ==========================================================================

/// --------------------------------------------------------------------------
/// Default color mix method
/// @group color
/// @type string ['mix' | 'scale']
/// --------------------------------------------------------------------------
$default-color-method: 'mix' !default;

/// --------------------------------------------------------------------------
/// Default color map
/// @group color
/// @type map
/// --------------------------------------------------------------------------
$default-color-map: (
  'info': #1273e6,
  'notice': #da7b12,
  'negative': #d7373f,
  'positive': #258f6c
);

/// --------------------------------------------------------------------------
/// Configurable color map
/// @group color
/// @type map
/// @requires $default-color-map
/// --------------------------------------------------------------------------
$stratus-color-map: $default-color-map !default;

/// --------------------------------------------------------------------------
/// Example get color
/// @group color
/// @author Matt McAdams
/// @requires $stratus-color-map
/// --------------------------------------------------------------------------
@function color($keys...) {
  $i: 0;
  $_map: $stratus-color-map;
  @each $arg in $keys { $i: $i+1 }
  @if $i > 1 {
    @return deep-map-get($_map, $keys...);
  } @else { @return map-get($_map, $keys...); }
}

/// --------------------------------------------------------------------------
/// Scale Index
/// @group color
/// @author Matt McAdams
///
/// @arg {number(unitless)} - Must be a non-negative integer < 1000 & divisible by 50
/// @example color-index(400) -> 20%
/// 500 is 0. every 50 represents 10%.
/// Inputs less than 500 will be converted to positive percentages,
/// Inputs greater than 500 will be converted to negative percentages.
/// --------------------------------------------------------------------------
@function scale-index($number) {
  @if is-integer(($number / 50)) and ($number < 1000) and ($number > 0) {
    @return (($number - 500) / - 5) + 0%;
  }
  @else {
    @return _error('Invalid argument for `$number`: `(#{$number}{#{type-of($number)}})`. Must be a non-negative integer < 1000 & divisible by 50.', 'scale-index');
  }
}

/// --------------------------------------------------------------------------
/// @name color-shift
/// @group color
/// @author Matt McAdams
/// @requires $default-color-method
///
/// @arg {color} $color - Color to be manipulated
/// @param {number(%)} $percent - percent by which to be manipulated, can be positive or negative
/// @param {number(%)} $opacity - desired opacity of returned color
/// @param {keyword['mix'|'scale']} $method [$default-color-method]
/// use color.mix() or color.scale() to calculate new color.
/// @example background-color: color-shift(#AAA, -20%);
/// --------------------------------------------------------------------------
@function color-shift($color, $percent: null, $opacity: null, $method: $default-color-method) {
  $_output: $color;

  @if ($percent != null) {
    @if $method == 'mix' {
      $_base: white;
      @if $percent < 0 { $_base: black; $percent: $percent * -1; }
      $_output: mix($_base, $color, $percent);
    }
    @else if $method == 'scale' {
      $_output: scale-color($color, $lightness: $percent);
    }
    @else {
      @return _error('Invalid argument for `$method`: `(#{$method}{#{type-of($method)}})`. Must be either `mix{string}` or `scale{string}`.', 'color-shift()');
    }
  }

  @if $opacity != null {
    $_output: scale-color($_output, $alpha: $opacity);
  }

  @return $_output;
}

// ==========================================================================
// END !SECTION COLOR
// ==========================================================================
