// ===========================================================================
// SECTION COLOR
// ===========================================================================

@use '../core/validation' as v;
@use '../../dist/config';

@use 'sass:meta';
@use 'sass:color';
@use 'sass:map';

/// --------------------------------------------------------------------------
/// Scale Index
/// @group color
/// @author Matt McAdams
///
/// @requires v.is-integer (validation.scss)
///
/// @arg {number(unitless)} - Must be a non-negative integer < 1000 & divisible by 50
///
/// @returns {number(%)}
/// @example color-index(400) -> 20%
/// 500 is 0. every 50 represents 10%.
/// Inputs less than 500 will be converted to positive percentages,
/// Inputs greater than 500 will be converted to negative percentages.
/// --------------------------------------------------------------------------
@function color-index(
  $number
  ) {
  @if (v.is-integer(($number / 50)))
  and ($number < 1000)
  and ($number > 0) {
    @return (($number - 500) / - 5) + 0%;
  }
}

// ===========================================================================
// SECTION Color Modifications
// ===========================================================================

/// --------------------------------------------------------------------------
/// Mix Color
/// @group color
/// @author Matt McAdams
///
/// @requires color.mix (sass:color)
///
/// @arg {color} $color
/// @arg {number(%)} $percent - can be positive or negative
///
/// @returns {color}
/// --------------------------------------------------------------------------
@function color-mix(
  $color,
  $percent
  ) {
  $_base: white;
  @if $percent < 0 {
    $_base: black; $percent: $percent * -1;
  }
  @return color.mix($_base, $color, $percent);
}

/// --------------------------------------------------------------------------
/// Shift Color
/// @group color
/// @author Matt McAdams
///
/// @requires mix
/// @requires color.scale (sass:color)
/// @requires config.$use-mix-method (config.scss)
///
/// @arg {color} $color - Color to be manipulated
/// @arg {number(%)} $percent - percent by which to be manipulated, can be positive or negative
/// @param {boolean} $mix [config.$use-mix-method]
/// use color.mix() or color.scale() to calculate new color.
///
/// @returns {color}
/// @example background-color: color-shift(#AAA, -20%);
/// --------------------------------------------------------------------------
@function color-scale(
  $color,
  $percent,
  $mix: config.$use-mix-method
  ) {
  @if $mix {
    @return color-mix($color, $percent);
  }
  @return color.scale($color, $lightness: $percent);
}

/// --------------------------------------------------------------------------
/// Color Alpha
/// @group color
/// @author Matt McAdams
///
/// @requires color.scale (sass:color)
///
/// @arg {color} $color
/// @arg {number(%) | color(0-1)} $opacity
///
/// @returns {color(rgba)}
/// --------------------------------------------------------------------------
@function color-alpha(
  $color,
  $opacity
  ) {
  @return color.scale($color, $alpha: $opacity);
}

// END !SECTION Color Modifications
// ===========================================================================
// SECTION Get Color
// IDEA
// It would be cool to have a function that could combine getting a color
// from a map and manipulating that color. For now, I feel this is outside the
// scope of this project, and possibly too opinionated as to the structure
// of the color data.
// ===========================================================================

/// --------------------------------------------------------------------------
/// Resolve Color
/// @group color
/// @author Matt McAdams
///
/// @requires map.get (sass:map)
/// @requires map.has-key (sass:map)
/// @requires v.is-color (validation.scss)
/// @requires config.$color-map (config.scss)
/// @requires config.$default-color-key (config.scss)
///
/// @arg {color | key($stratus-color-map)} $name
/// @arg {key($name)} $variant
///
/// @returns {color}
/// --------------------------------------------------------------------------
// @function resolve(
//   $name,
//   $variant
//   ) {
//   $_output: null;

//   // bypass logic if the input is already a color
//   @if stratus.is-color($name) {
//     @return $name;
//   }

//   // If the $color is a key on the color map, assign the output as that key, else pass $color through
//   $_output: if(
//     map.has-key(config.$color-map, $name),
//     map.get(config.$color-map, $name),
//     $name
//   );

//   // See if the variant is a key on the map, else assign the new output the default key
//    @if stratus.is-map($_output){
//     $_output: if(
//       map.has-key($_output, $variant),
//       map.get($_output, $variant),
//       map.get($_output, config.$default-color-key)
//     );
//   }

//   @return $_output;
// }

/// --------------------------------------------------------------------------
/// Set Color
/// @group color
/// @author Matt McAdams
///
/// @requires config.$use-mix-method (config.scss)
/// @requires stratus.is-percentage (validation.scss)
/// @requires shift
/// @requires resolve
/// @requires alpha
///
/// @arg {color | key(config.$stratus-color-map)} $color
/// @param {number(%) | key($color)} $variant [null]
/// @param {number(%) | number(0-1)} $opacity [null]
/// @param {boolean} $mix [config.$use-mix-method]
///
/// @returns {color}
/// --------------------------------------------------------------------------
// @function set(
//   $color,
//   $variant: null,
//   $opacity: null,
//   $mix: config.$use-mix-method
//   ) {
//   $_color: resolve($color, $variant);
//   $_output: $_color;

//   // made edits to the color if necessary
//   @if stratus.is-percentage($variant) {
//     $_output: shift($_output, $variant, $mix)
//   }

//   // adjust opacity if necessary
//   @if $opacity {
//     @return alpha($_output, $opacity);
//   }
//   @return $_output;
// }

// END !SECTION Get Color
// ==========================================================================
// END !SECTION COLOR
// ==========================================================================
