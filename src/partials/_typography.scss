// ==========================================================================
// SECTION TYPOGRAPHY
// ==========================================================================

// SECTION Config
// --------------------------------------------------------------------------

// Calculate rem values of type config input
$stratus-type-values: (
  'text-size': stratus('config.type.text-size') / stratus('config.type.rem-size') + 0rem,
  'line-height': stratus('config.type.text-size') * stratus('config.type.line-height') / stratus('config.type.rem-size') + 0rem,
  'rem-size': stratus('config.type.rem-size') + 0px
);

@function type-get($key) { @return map-get($stratus-type-values, $key); }

// Set Bourbon settings to match that of Stratus
$bourbon: (
  "modular-scale-base": type-get('text-size'),
  "modular-scale-ratio": stratus('type.ratio')
);

// END !SECTION Config
// SECTION Line Height
// Calculates line height based on input text size
// --------------------------------------------------------------------------

/// Line Height
/// Calculate line height based on input text size
/// @name line-height
/// @group typography
/// @author Matthew McAdams
///
/// @param {number} $input - text size to calculate line height for
///
/// @return {number(rem)}

@function line-height( $input: type-get('text-size') ) {
  $base-line-height: strip-unit( type-get('line-height') );
  $text-size: strip-unit( $input );

  $line-height: 0;
  $i: 1;

  @while $line-height < $text-size {
    $line-height: $base-line-height * $i;
    $i: $i + 0.5;
  }
  @return $line-height + 0rem;
}

// END !SECTION Line Height
// SECTION Mixins
// --------------------------------------------------------------------------

/// Type Init
/// Generate css custom properties
/// based on key labels in input map and input ratio
/// @name type-init
/// @group typography
/// @author Matthew McAdams
///
/// @param {map} $scale - map with corresponding type scale
/// @param {number(unitless) | key[$stratus.type]} $ratio - ratio to generate font sizes
///
/// @example
/// :root { @include type-init($scale: 'scale-alt'); }
/// @example
/// :root { @include type-init($ratio: 'ratio-alt'); }
/// :root { @include type-init($ratio: 1.25); }


@mixin type-init($scale: stratus('type.scale'), $ratio: stratus('type.ratio')) {
  @if type-of($ratio) != number {
    $ratio: stratus('type.#{$ratio}');
  }
  --ratio: $ratio + 0em;

  @each $key, $value in $scale {
    $size: modular-scale($value, $ratio);
    --#{$key}: #{$size};
    --#{$key}-lh: #{line-height($size)};
  }
  @if (stratus('config.global.use-dual-scale') != true) {
    @warn "The mixin type-init is only used to output css custom properties for use with multiple typographical scales, but stratus is set to use a single scale. See the 'use-dual-scale' key in Stratus configuration";
  }
}

/// Typesetting
/// Assign font size and line height using the modular scale
/// @name type-setting
/// @group typography
/// @author Matthew McAdams
///
/// @param {number(unitless) | key[$stratus.type.scale]} $input - Number of steps to move up or down the scale
///
/// @example
/// p { @include type-setting(normal); }
/// h1 { @include type-setting(large); }

@mixin type-setting($input: normal) {
  @if type-of($input) != number { $step: stratus('type.scale.#{$input}'); }
  @else { $step: $input; }

  $size: modular-scale($step);

  font-size: $size;
  line-height: line-height($size);

  @if ($use-dual-scale == true) {
    font-size: var(--#{$input});
    line-height: var(--#{$input}-lh);
  }
}

// END !SECTION Mixins
// END !SECTION TYPOGRAPHY
