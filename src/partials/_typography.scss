// ===========================================================================
// SECTION TYPOGRAPHY
// ===========================================================================

@use 'sass:map';
@use 'sass:math';
@use '../../dist/config';
@use '../core/function' as stratus;

// SECTION Config
// ===========================================================================

/// --------------------------------------------------------------------------
/// Get Configuration
/// Gets configuration information from the $type map in config.scss
/// @group typography
/// @author Matthew McAdams
///
/// @requires config.$type (config.scss)
/// @requires map.get (sass:map)
///
/// @arg {key(config.$type)} $key
/// --------------------------------------------------------------------------
// @function _type-config($key) {
//   @return map.get(config.$type, $key);
// }

// TODO: Add warning when input values are not in px

/// --------------------------------------------------------------------------
/// Calculate rem values of config data
/// @group typography
/// @author Matthew McAdams
///
/// @requires stratus.strip-unit (functions.scss)
/// @requires map.get (sass:map)
///
/// @arg {keyword['text-size'| 'line-height' | 'rem-size']} $key
/// --------------------------------------------------------------------------
@function _type-size() {
  $_base: map.get(config.$type-base, 'text-size');
  $_unit: map.get(config.$type-base, 'unit');
  @return stratus.convert($_base, $_unit);
}

// END !SECTION Config
// SECTION Logic
// ===========================================================================

/// --------------------------------------------------------------------------
/// Line Height
/// Calculate line height based on input text size
/// @group typography
/// @author Matthew McAdams
///
/// @requires math.unit (sass:math)
/// @requires math.is-unitless (sass:math)
/// @requires map.get (sass:map)
/// @requires string.index (sass:string)
/// @requires stratus.strip-unit (function.scss)
/// @requires config.$type-base (config.scss)
///
/// @arg {number(with-unit)} $text-size - text size to calculate line height for
/// @param {number(unitless)} $line-height - Line height to use as the base for calculation
///
/// @return {number}
/// --------------------------------------------------------------------------
@function type-line-height(
  $text-size,
  $line-height: map.get(config.$type-base, 'line-height')
  ) {

  $_value: $line-height;
  @if string.index('px, pt, rem', math.unit($text-size))
  or math.is-unitless($text-size) {
    $_initial-lh: stratus.strip-unit( $line-height );
    $_text-size: stratus.strip-unit( $text-size );
    $_i: 0.5;
    @while $_value < $_text-size {
      $_value: $_initial-lh * $_i;
      $_i: $_i + 0.5;
    }
    @return $_value + ($text-size * 0);
  }

  @return $line-height;
}

/// --------------------------------------------------------------------------
/// Modular Scale
/// Increments up or down a defined scale and returns an adjusted value.
/// @group typography
/// @author Matthew McAdams
///
/// @requires map.get (sass:map)
/// @requires config.$type-ratio (config.scss)
/// @requires stratus.convert (function.scss)
/// @requires stratus.modular-scale (function.scss)
///
/// @arg {number(unitless)} $increment
/// How many steps to increment up or down the scale.
/// @param {number(with unit)} $base
///   The base value the scale starts at.
/// @param {number (unitless)} $ratio [config.$type-ratio]
///   The ratio the scale is built on.

/// @returns {number}
/// --------------------------------------------------------------------------
@function type-scale(
  $increment,
  $base: _type-size(),
  $ratio: config.$type-ratio
  ) {
  @return stratus.modular-scale($increment, $base, $ratio);
}

// END !SECTION Logic
// SECTION Mixins
// ===========================================================================

/// --------------------------------------------------------------------------
/// Type Init
/// Generate css custom properties based on keys on input map and input ratio
/// @group typography
/// @author Matthew McAdams
///
/// @requires map.get (sass:map)
/// @requires config.$type-scale (config.scss)
/// @requires config.$type-ratio (config.scss)
/// @requires type-scale
/// @requires _line-height
///
/// @param {map} $scale [config.$type-scale] - map with corresponding type scale
/// @param {number(unitless) | key[$stratus.type]} $ratio
/// [config.$type-ratio] - ratio used to generate font sizes
///
/// @example
/// :root { @include type-init($scale: 'scale-alt'); }
/// @example
/// :root { @include type-init($ratio: 'ratio-alt'); }
/// :root { @include type-init($ratio: 1.25); }
/// --------------------------------------------------------------------------
@mixin type-init(
  $scale: config.$type-scale,
  $ratio: config.$type-ratio
  ) {
  --ratio: #{$ratio + 0em};

  @each $_key, $_step in $scale {
    $_size: type-scale($increment: $_step, $ratio: $ratio);
    --#{$_key}: #{$_size};
    --#{$_key}-lh: #{type-line-height($_size)};
  }
  @if not (map.get(config.$type-base, 'use-dynamic-scale')) {
    @warn "The mixin type-init is only used to output css custom properties for use with multiple typographical scales, but stratus is set to use a single scale. See the 'use-dynamic-scale' key in `$type-base`";
  }
}

/// --------------------------------------------------------------------------
/// Typesetting
/// Assign font size and line height using the modular scale
/// @group typography
/// @author Matthew McAdams
///
/// @requires map.get (sass:map)
/// @requires config.$type-scale (config.scss)
/// @requires config.$type-base (config.scss)
/// @requires type-scale
/// @requires line-height
///
/// @param {key[$stratus.type.scale] | string} $name
///   string used to generate css variables and calculate the step
///   from the stratus config map.
/// @param {null | number(unitless)} $step
///   Number of steps to move up or down the scale, development
///   parameter only, should not be used in production.
/// @param {boolean} $print-variables
///    Tells the mixin if it should include css variables in the output.
///    Defaults to the `use-dynamic-scale` option in stratus configuration.
///    Advanced / edge use only
///
/// @example
/// p { @include type-set(normal); }
/// h1 { @include type-set(large); }
/// --------------------------------------------------------------------------
@mixin type-set(
  $name: 'normal',
  $step: null,
  $print-variables: map.get(config.$type-base, 'use-dynamic-scale')
  ) {

  @if $step == null {
    $step: map.get(config.$type-scale, $name);
  }
  @else if $print-variables {
    @warn "Using a generic string and defining a manual `$step` value may produce unpredictable problems.";
  }

  $size: type-scale($step);

  font-size: $size;
  line-height: _line-height($size);

  @if $print-variables {
    font-size: var(--#{$name});
    line-height: var(--#{$name}-lh);
  }
}

// END !SECTION Mixins
// END !SECTION TYPOGRAPHY
