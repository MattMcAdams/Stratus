// ==========================================================================
// SECTION TYPOGRAPHY
// ==========================================================================

// SECTION Config
// --------------------------------------------------------------------------
$type-config: (
  'use-dynamic-scale': false,
  'text-size': 16,
  'line-height': 1.6,
  'rem-size': 16
) !default;

@function type-config($key) {
  @return map-get($type-config, $key);
}

$scale-ratio: 1.25 !default;

$type-scale: (
  'xlarge': 3,
  'large': 2,
  'medium': 1,
  'normal': 0,
  'small': -1,
  'xsmall': -2,
) !default;

@function type-get($key) {
  $_input-size: strip-unit(type-config('text-size'));
  $_input-rem: strip-unit(type-config('rem-size'));
  $_input-lh: strip-unit(type-config('line-height'));

  @if $key == 'text-size' { @return $_input-size / $_input-rem + 0rem; }
  @if $key == 'line-height' { @return ($_input-size * $_input-lh) / $_input-rem + 0rem; }
  @if $key == 'rem-size' { @return $_input-rem + 0px; }
}

// Set Bourbon settings to match that of Stratus
$bourbon: (
  "modular-scale-base": type-get('text-size'),
  "modular-scale-ratio": $scale-ratio
);

// END !SECTION Config
// SECTION Line Height
// Calculates line height based on input text size
// --------------------------------------------------------------------------

/// Line Height
/// Calculate line height based on input text size
/// @name line-height
/// @group typography
/// @author Matthew McAdams
/// @access private
///
/// @param {number(rem)} $text-size - text size to calculate line height for
/// @param {number(rem)} $line-height - Line height to use as the base for calculation
///
/// @return {number(rem)}

@function line-height( $text-size: type-get('text-size'), $line-height: type-get('line-height') ) {

  @if unit($text-size) != 'rem' or unit($line-height) != 'rem' {
    @warn "Both text size and line height are expected as 'rem' units. `$text-size`: `#{unit($text-size)}`, `$line-height`: `#{unit($line-height)}`.";
  }

  $_start-line-height: strip-unit($line-height);
  $_text-size: strip-unit( $text-size );

  $_line-height: 0;
  $_i: 1;

  @while $_line-height < $_text-size {
    $_line-height: $_start-line-height * $_i;
    $_i: $_i + 0.5;
  }
  @return $_line-height + 0rem;
}

// END !SECTION Line Height
// SECTION Mixins
// --------------------------------------------------------------------------

/// Type Init
/// Generate css custom properties
/// based on key labels in input map and input ratio
/// @name type-init
/// @group typography
/// @author Matthew McAdams
/// @access public
///
/// @param {map} $scale - map with corresponding type scale
/// @param {number(unitless) | key[$stratus.type]} $ratio - ratio to generate font sizes
///
/// @example
/// :root { @include type-init($scale: 'scale-alt'); }
/// @example
/// :root { @include type-init($ratio: 'ratio-alt'); }
/// :root { @include type-init($ratio: 1.25); }


@mixin type-init($scale: $type-scale, $ratio: $scale-ratio) {
  --ratio: #{$ratio + 0em};

  @each $key, $step in $scale {
    $size: modular-scale($increment: $step, $ratio: $ratio) + 0rem;
    --#{$key}: #{$size};
    --#{$key}-lh: #{line-height($size)};
  }
  @if (type-config('use-dynamic-scale') != true) {
    @warn "The mixin type-init is only used to output css custom properties for use with multiple typographical scales, but stratus is set to use a single scale. See the 'use-dynamic-scale' key in `$type-config`";
  }
}

/// Typesetting
/// Assign font size and line height using the modular scale
/// @name type-setting
/// @group typography
/// @author Matthew McAdams
/// @access public
///
/// @param {key[$stratus.type.scale] | string} $name - string used to generate css variables and calculate the step from the stratus config map.
/// @param {null | number(unitless)} $step - Number of steps to move up or down the scale, development parameter only, should not be used in production.
/// @param {boolean} $print-variables - Tells the mixin if it should include css variables in the output. Defaults to the `use-dynamic-scale` option in stratus configuration. Advanced / edge use only
///
/// @example
/// p { @include type-setting(normal); }
/// h1 { @include type-setting(large); }

@mixin type-setting($name: 'normal',  $step: null, $print-variables: map-get($type-config, 'use-dynamic-scale')) {

  @if $step == null {
    $step: map-get($type-scale, $name);
  } @else if $print-variables == true {
    @warn "Using a generic string and defining a manual `$step` value may produce unpredictable problems.";
    @warn "It is advised to use `$name` to refer to a key on the stratus configuration object. See `$stratus > type > scale > [$name]`. The `$step` will be generated from the value of this key. This ensures css variables are generated with the correct values.";
  }

  $size: modular-scale($step);

  font-size: $size;
  line-height: line-height($size);

  @if $print-variables == true {
    font-size: var(--#{$name});
    line-height: var(--#{$name}-lh);
  }
}

//$font-stack: (
//  'body': $font-stack-georgia,
//  'head': $font-stack-helvetica,
//  'mono': $font-stack-monaco,
//  'icon': null
//);
//
//@mixin font($name, $weight: 'normal') {
//  font-family: map-get($font-stack, $name);
//}
// END !SECTION Mixins
// END !SECTION TYPOGRAPHY
