$test-scale: (
  'xlarge': 3,
  'large': 2,
  'medium': 1,
  'normal': 0,
  'small': -1,
  'xsmall': -2
);

@use 'true';
@use 'sass:math';
@use '../../src/partials/typography' as stratus with (
  $config-rem-size: 10px,
  $config-type-unit-zero: 0rem,
  $config-base-text-size: 15px,
  $config-line-height: 1.5,
  $config-default-ratio: 1.5,
  $config-default-scale: $test-scale
);

@use '../../src/core' as s;

// type-scale( $increment, $base, $ratio)
// ===========================================================================
@include true.test-module('type-scale [function]') {
  @include true.test('pulls correct values from configuration') {

    $test: stratus.type-scale(2);
    $expected: s.modular-scale(2, 1.5rem, 1.5);

    @include true.assert-equal($test, $expected);
  }
}

// line-height( $text-size, $line-height, $static-output )
// ===========================================================================
@include true.test-module('line-height [function]'){
  @include true.test('correct output with px') {
    $test: stratus.line-height(15px, 1.5, 10px);
    $expected: 15px;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('pass through with em') {
    $test: stratus.line-height(2em, 1.5, 1.2em);
    $expected: 1.5;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('correct output with pt') {
    $test: stratus.line-height(16pt, 1.5, 12pt);
    $expected: 18pt;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('correct output with rem') {
    $test: stratus.line-height(2rem, 1.5, 1.2rem);
    $expected: 2.7rem;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('correct output using configuration') {
    $test: stratus.line-height(3.5rem);
    $expected: 4.5rem;
    @include true.assert-equal($test, $expected);
  }
}

// type-init( $scale, $ratio )
// ===========================================================================
@include true.test-module('type-init [mixin]') {

  $-test-scale: (
    'medium': 1,
    'normal': 0,
    'small': -1
  );

  @include true.test('returns input ratio as a css variable'){
    @include true.assert {
      @include true.output {
        @include stratus.type-init($-test-scale);
      }
      @include true.contains {
        --ratio: 1.5em;
      }
    }
  }

  @include true.test('returns calculated font sizes for steps in the scale') {
    @include true.assert {
      @include true.output {
        @include stratus.type-init($-test-scale);
      }
      @include true.contains {
        --medium: #{s.modular-scale(1, 1.5rem, 1.5)};
        --normal: #{s.modular-scale(0, 1.5rem, 1.5)};
        --small: #{s.modular-scale(-1, 1.5rem, 1.5)};
      }
    }
  }
}

// type-set( $name, $step, $print-variables, $map )
// ===========================================================================
@include true.test-module('type-set [mixin]') {

  $-test-scale: (
    'medium': 1,
    'normal': 0,
    'small': -1
  );

  @include true.test('returns a font size incremented up the modular scale') {
    @include true.assert {
      @include true.output{
        @include stratus.type-set($step: 1);
      }
      @include true.contains {
        font-size: #{stratus.type-scale($increment: 1)};
      }
    }
  }

  @include true.test('returns the correct line height') {
    @include true.assert {
      @include true.output{
        @include stratus.type-set($step: 1);
      }
      @include true.contains {
        line-height: #{stratus.line-height(stratus.type-scale($increment: 1))};
      }
    }
  }

  @include true.test('includes correct variables when dynamic mode is enabled') {
    @include true.assert {
      @include true.output{
        @include stratus.type-set('medium', 1, $print-variables: true);
      }
      @include true.contains {
        font-size: var(--medium);
        line-height: var(--medium-lh);
      }
    }
  }

  @include true.test('uses correct data from custom map') {
    @include true.assert {
      @include true.output{
        @include stratus.type-set('small', $map: $-test-scale);
      }
      @include true.contains {
        font-size: #{stratus.type-scale($increment: -1)};
        line-height: #{stratus.line-height(stratus.type-scale($increment: -1))};
      }
    }
  }
}
