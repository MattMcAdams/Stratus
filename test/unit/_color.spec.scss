$inspect: true;

$default-color-key: 'base';
$use-mix-method: true;
$test-color-map: (
  'info': #1273e6,
  'notice': #da7b12,
  'negative': #d7373f,
  'positive': (
    'base': #258f6c,
    'dark': #1a684e
    )
);
$stratus-color-map: $test-color-map;

@include test-module('resolve color') {
  @include test('returns input when input is a color') {
    $test: resolve-color(#1273e6, null);
    $expected: #1273e6;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('fetches a color from the test map') {
    $test: resolve-color('info', null);
    $expected: #1273e6;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('fetches a color from the test map with a bad variant') {
    $test: resolve-color('info', 20%);
    $expected: #1273e6;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('fetches a color from a nested map') {
    $test: resolve-color('positive', 'dark');
    $expected: #1a684e;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('fetches a the base color from a nested map when no variant is given') {
    $test: resolve-color('positive', null);
    $expected: #258f6c;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('fetches a the base color from a nested map when a bad variant is given') {
    $test: resolve-color('positive', 20%);
    $expected: #258f6c;
    @include assert-equal(inspect($test), inspect($expected));
  }
}

@include test-module('scale-index($number)') {
  @include test('output 0% with input of 500') {
    $test: scale-index(500);
    $expected: 0%;
    @include assert-equal($test, $expected);
  }

  @include test('output negative number with input greater than 500') {
    $test: if(scale-index(700) < 0, true, false);
    $expected: true;
    @include assert-equal($test, $expected);
  }

  @include test('output 10% with input 450') {
    $test: scale-index(450);
    $expected: 10%;
    @include assert-equal($test, $expected);
  }

  @include test('output 40% with input 300') {
    $test: scale-index(300);
    $expected: 40%;
    @include assert-equal($test, $expected);
  }

  @include test('output -40% with input 700') {
    $test: scale-index(700);
    $expected: -40%;
    @include assert-equal($test, $expected);
  }

  @include test('output -10% with input 550') {
    $test: scale-index(550);
    $expected: -10%;
    @include assert-equal($test, $expected);
  }

  @include test('throw error with input indivisible by 50') {
    $test: scale-index(508);
    $expected: 'ERROR [scale-index] Invalid argument for `$number`: `(508{number})`. Must be a non-negative integer < 1000 & divisible by 50.';
    @include assert-equal($test, $expected);
  }

  @include test('throw error with input is less than 0') {
    $test: scale-index(-100);
    $expected: 'ERROR [scale-index] Invalid argument for `$number`: `(-100{number})`. Must be a non-negative integer < 1000 & divisible by 50.';
    @include assert-equal($test, $expected);
  }
}

@include test-module('color-mix') {
  @include test('return tinted color with positive $percent') {
    $test: color-mix(#1273e6, 20%);
    $expected: mix(white, #1273e6, 20%);
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('return shaded color with negative $percent') {
    $test: color-mix(#1273e6, -20%);
    $expected: mix(black, #1273e6, 20%);
    @include assert-equal(inspect($test), inspect($expected));
  }
}


@include test-module('color-shift') {
  @include test('call color-mix with $mix-method: true') {
    $test: color-shift(#1273e6, 20%, $mix-method: true);
    $expected: color-mix(#1273e6, 20%);
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('return scaled color with negative $percent and $mix-method: false') {
    $test: color-shift(#1273e6, -20%, $mix-method: false);
    $expected: scale-color(#1273e6, $lightness: -20%);
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('return scaled color with positive $percent and $mix-method: false') {
    $test: color-shift(#1273e6, 20%, $mix-method: false);
    $expected: scale-color(#1273e6, $lightness: 20%);
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('return unmanipulated color with an input of 0%, regardless of method') {
    $testA: color-shift(#1273e6, 0%, $mix-method: false);
    $testB: color-shift(#1273e6, 0%, $mix-method: true);
    $expected: #1273e6;
    @include assert-equal(inspect($testA), inspect($testB), inspect($expected));
  }
}

@include test-module('color'){
  @include test('returns a color with no modifications'){
    $test: color(#1273e6);
    $expected: #1273e6;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('returns a color from the map'){
    $test: color('info');
    $expected: #1273e6;
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('returns a color from the map with mix'){
    $test: color('info', 20%, $mix-method: true);
    $expected: mix(white, #1273e6, 20%);
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('returns a color from the map with scale'){
    $test: color('info', 20%, $mix-method: false);
    $expected: scale-color(#1273e6, $lightness: 20%);
    @include assert-equal(inspect($test), inspect($expected));
  }

  @include test('adjusts opacity'){
    $test: color('info', null, 0.5);
    $expected: scale-color(#1273e6, $alpha: 0.5);
    @include assert-equal(inspect($test), inspect($expected));
  }
}
