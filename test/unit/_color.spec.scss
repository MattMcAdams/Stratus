@use 'true';

@use '../../dist/config' as config;
@use '../../src/partials/color' as stratus;

@use 'sass:color';
@use 'sass:meta';

@include true.test-module('color-index [function]') {
  @include true.test('output 0% with input of 500') {
    $test: stratus.color-index(500);
    $expected: 0%;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('output negative number with input greater than 500') {
    $test: if(stratus.color-index(700) < 0, true, false);
    $expected: true;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('output 10% with input 450') {
    $test: stratus.color-index(450);
    $expected: 10%;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('output 40% with input 300') {
    $test: stratus.color-index(300);
    $expected: 40%;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('output -40% with input 700') {
    $test: stratus.color-index(700);
    $expected: -40%;
    @include true.assert-equal($test, $expected);
  }

  @include true.test('output -10% with input 550') {
    $test: stratus.color-index(550);
    $expected: -10%;
    @include true.assert-equal($test, $expected);
  }
}

@include true.test-module('color-mix [function]') {
  @include true.test('return tinted color with positive $percent') {
    $test: stratus.color-mix(#1273e6, 20%);
    $expected: color.mix(white, #1273e6, 20%);
    @include true.assert-equal(inspect($test), inspect($expected));
  }

  @include true.test('return shaded color with negative $percent') {
    $test: stratus.color-mix(#1273e6, -20%);
    $expected: color.mix(black, #1273e6, 20%);
    @include true.assert-equal(meta.inspect($test), meta.inspect($expected));
  }
}


@include true.test-module('color-scale [function]') {
  @include true.test('call color-mix with $mix: true') {
    $test: stratus.color-scale(#1273e6, 20%, $mix: true);
    $expected: stratus.color-mix(#1273e6, 20%);
    @include true.assert-equal(meta.inspect($test), meta.inspect($expected));
  }

  @include true.test('return scaled color with negative $percent and $mix: false') {
    $test: stratus.color-scale(#1273e6, -20%, $mix: false);
    $expected: color.scale(#1273e6, $lightness: -20%);
    @include true.assert-equal(meta.inspect($test), meta.inspect($expected));
  }

  @include true.test('return scaled color with positive $percent and $mix: false') {
    $test: stratus.color-scale(#1273e6, 20%, $mix: false);
    $expected: color.scale(#1273e6, $lightness: 20%);
    @include true.assert-equal(meta.inspect($test), meta.inspect($expected));
  }

  @include true.test('return unmanipulated color with an input of 0%, regardless of method') {
    $testA: stratus.color-scale(#1273e6, 0%, $mix: false);
    $testB: stratus.color-scale(#1273e6, 0%, $mix: true);
    $expected: #1273e6;
    @include true.assert-equal(meta.inspect($testA), meta.inspect($testB), meta.inspect($expected));
  }
}
