$type-config: (
  'use-dynamic-scale': false,
  'text-size': 10,
  'line-height': 1.5,
  'rem-size': 10
);

$stratus-space-unit: _space-unit();

@include test-module('structure calculation - auto') {
  @include test('_space-unit pulls correct base measurement') {
    $test: _space-unit();
    $expected: 1.5rem;
    @include assert-equal($test, $expected);
  }
  @include test('s() calculates correct measurement with input') {
    $test: s(5);
    $expected: 7.5rem;
    @include assert-equal($test, $expected);
  }
}

$space-unit: 7px;
$stratus-space-unit: _space-unit();

@include test-module('structure calculation - custom') {
  @include test('_space-unit pulls correct base measurement') {
    $test: _space-unit();
    $expected: 7px;
    @include assert-equal($test, $expected);
  }
  @include test('s() calculates correct measurement with input') {
    $test: s(2);
    $expected: 14px;
    @include assert-equal($test, $expected);
  }
}

$space-unit: 'bad-value';
$stratus-space-unit: _space-unit();

@include test-module('structure calculation - error handling') {
  @include test('_space-unit throws an error when a value with invalid type is passed through') {
    $test: _space-unit();
    $expected: 'ERROR [Stratus _space-unit()] $space-unit: `bad-value` is not a valid value. Must be either a number or "auto".';
    @include assert-equal($test, $expected);
  }
}
